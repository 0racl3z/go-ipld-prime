package schema

// This file is for types and functions that aren't part of the readable API of this package,
// but were needed to make some part of the Compiler's API expressable.
// I call this file "carriers" because all these types are just short-lived carriers for data,
// and their content ends up remunged and handled by the Compiler almost immediately after creation.
//
// Coincidentally, they're all so boring that I templated them.
//
// (Nothing in this file would be necessary if we had been able to use the schemadmt types directly,
// since they would've provided all the semantics these types (re)describe;
// these very boring types are only necessary because we are in a unique position
// of being unable to use our own codegen due for import cycle reasons (see other comments in Compiler about this).)

// Code generated by comments in carrier.go.  DO NOT EDIT below this line.
// ---

type list__StructField struct {
	x []StructField
}
type list__StructField__Builder list__StructField

func (Compiler) MakeList__StructField(ents ...StructField) list__StructField {
	x := make([]StructField, len(ents))
	copy(x, ents)
	return list__StructField{x}
}
func (Compiler) StartList__StructField(sizeHint int) list__StructField__Builder {
	return list__StructField__Builder{make([]StructField, 0, sizeHint)}
}
func (b *list__StructField__Builder) Append(v StructField) {
	b.x = append(b.x, v)
}
func (b *list__StructField__Builder) Finish() list__StructField {
	v := *b
	b.x = nil
	return list__StructField(v)
}

type list__StructFieldName struct {
	x []StructFieldName
}
type list__StructFieldName__Builder list__StructFieldName

func (Compiler) MakeList__StructFieldName(ents ...StructFieldName) list__StructFieldName {
	x := make([]StructFieldName, len(ents))
	copy(x, ents)
	return list__StructFieldName{x}
}
func (Compiler) StartList__StructFieldName(sizeHint int) list__StructFieldName__Builder {
	return list__StructFieldName__Builder{make([]StructFieldName, 0, sizeHint)}
}
func (b *list__StructFieldName__Builder) Append(v StructFieldName) {
	b.x = append(b.x, v)
}
func (b *list__StructFieldName__Builder) Finish() list__StructFieldName {
	v := *b
	b.x = nil
	return list__StructFieldName(v)
}

type map__StructFieldName__StructRepresentation_Map_FieldDetails struct {
	x map[StructFieldName]StructRepresentation_Map_FieldDetails
}
type map__StructFieldName__StructRepresentation_Map_FieldDetails__Entry struct {
	k StructFieldName
	v StructRepresentation_Map_FieldDetails
}
type map__StructFieldName__StructRepresentation_Map_FieldDetails__Builder map__StructFieldName__StructRepresentation_Map_FieldDetails

func (Compiler) MakeMap__StructFieldName__StructRepresentation_Map_FieldDetails(ents ...map__StructFieldName__StructRepresentation_Map_FieldDetails__Entry) map__StructFieldName__StructRepresentation_Map_FieldDetails {
	x := make(map[StructFieldName]StructRepresentation_Map_FieldDetails, len(ents))
	for _, y := range ents {
		x[y.k] = y.v
	}
	return map__StructFieldName__StructRepresentation_Map_FieldDetails{x}
}
func (Compiler) MakeMap__StructFieldName__StructRepresentation_Map_FieldDetails__Entry(k StructFieldName, v StructRepresentation_Map_FieldDetails) map__StructFieldName__StructRepresentation_Map_FieldDetails__Entry {
	return map__StructFieldName__StructRepresentation_Map_FieldDetails__Entry{k, v}
}
func (Compiler) StartMap__StructFieldName__StructRepresentation_Map_FieldDetails(sizeHint int) map__StructFieldName__StructRepresentation_Map_FieldDetails__Builder {
	return map__StructFieldName__StructRepresentation_Map_FieldDetails__Builder{make(map[StructFieldName]StructRepresentation_Map_FieldDetails, sizeHint)}
}
func (b *map__StructFieldName__StructRepresentation_Map_FieldDetails__Builder) Append(k StructFieldName, v StructRepresentation_Map_FieldDetails) {
	b.x[k] = v
}
func (b *map__StructFieldName__StructRepresentation_Map_FieldDetails__Builder) Finish() map__StructFieldName__StructRepresentation_Map_FieldDetails {
	v := *b
	b.x = nil
	return map__StructFieldName__StructRepresentation_Map_FieldDetails(v)
}

type list__TypeName struct {
	x []TypeName
}
type list__TypeName__Builder list__TypeName

func (Compiler) MakeList__TypeName(ents ...TypeName) list__TypeName {
	x := make([]TypeName, len(ents))
	copy(x, ents)
	return list__TypeName{x}
}
func (Compiler) StartList__TypeName(sizeHint int) list__TypeName__Builder {
	return list__TypeName__Builder{make([]TypeName, 0, sizeHint)}
}
func (b *list__TypeName__Builder) Append(v TypeName) {
	b.x = append(b.x, v)
}
func (b *list__TypeName__Builder) Finish() list__TypeName {
	v := *b
	b.x = nil
	return list__TypeName(v)
}

type map__String__TypeName struct {
	x map[string]TypeName
}
type map__String__TypeName__Entry struct {
	k string
	v TypeName
}
type map__String__TypeName__Builder map__String__TypeName

func (Compiler) MakeMap__String__TypeName(ents ...map__String__TypeName__Entry) map__String__TypeName {
	x := make(map[string]TypeName, len(ents))
	for _, y := range ents {
		x[y.k] = y.v
	}
	return map__String__TypeName{x}
}
func (Compiler) MakeMap__String__TypeName__Entry(k string, v TypeName) map__String__TypeName__Entry {
	return map__String__TypeName__Entry{k, v}
}
func (Compiler) StartMap__String__TypeName(sizeHint int) map__String__TypeName__Builder {
	return map__String__TypeName__Builder{make(map[string]TypeName, sizeHint)}
}
func (b *map__String__TypeName__Builder) Append(k string, v TypeName) {
	b.x[k] = v
}
func (b *map__String__TypeName__Builder) Finish() map__String__TypeName {
	v := *b
	b.x = nil
	return map__String__TypeName(v)
}
