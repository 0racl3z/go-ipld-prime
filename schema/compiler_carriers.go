package schema

// This file is for types and functions that aren't part of the readable API of this package,
// but were needed to make some part of the Compiler's API expressable.
// I call this file "carriers" because all these types are just short-lived carriers for data,
// and their content ends up remunged and handled by the Compiler almost immediately after creation.
//
// Coincidentally, they're all so boring that I templated them.
//
// (Nothing in this file would be necessary if we had been able to use the schemadmt types directly,
// since they would've provided all the semantics these types (re)describe;
// these very boring types are only necessary because we are in a unique position
// of being unable to use our own codegen due for import cycle reasons (see other comments in Compiler about this).)

// Code generated by comments in carrier.go.  DO NOT EDIT below this line.
// ---

type structFieldList struct {
	x []StructField
}
type structFieldListBuilder structFieldList

func (Compiler) MakeStructFieldList(ents ...StructField) structFieldList {
	x := make([]StructField, len(ents))
	copy(x, ents)
	return structFieldList{x}
}
func (Compiler) StartStructFieldList(sizeHint int) structFieldListBuilder {
	return structFieldListBuilder{make([]StructField, 0, sizeHint)}
}
func (b *structFieldListBuilder) Append(v StructField) {
	b.x = append(b.x, v)
}
func (b *structFieldListBuilder) Finish() structFieldList {
	v := *b
	b.x = nil
	return structFieldList(v)
}

type structFieldNameStructRepresentation_Map_FieldDetailsMap struct {
	x map[StructFieldName]StructRepresentation_Map_FieldDetails
}
type structFieldNameStructRepresentation_Map_FieldDetailsEntry struct {
	k StructFieldName
	v StructRepresentation_Map_FieldDetails
}
type structFieldNameStructRepresentation_Map_FieldDetailsMapBuilder structFieldNameStructRepresentation_Map_FieldDetailsMap

func (Compiler) MakeStructFieldNameStructRepresentation_Map_FieldDetailsMap(ents ...structFieldNameStructRepresentation_Map_FieldDetailsEntry) structFieldNameStructRepresentation_Map_FieldDetailsMap {
	x := make(map[StructFieldName]StructRepresentation_Map_FieldDetails, len(ents))
	for _, y := range ents {
		x[y.k] = y.v
	}
	return structFieldNameStructRepresentation_Map_FieldDetailsMap{x}
}
func (Compiler) MakeStructFieldNameStructRepresentation_Map_FieldDetailsMapEntry(k StructFieldName, v StructRepresentation_Map_FieldDetails) structFieldNameStructRepresentation_Map_FieldDetailsEntry {
	return structFieldNameStructRepresentation_Map_FieldDetailsEntry{k, v}
}
func (Compiler) StartStructFieldNameStructRepresentation_Map_FieldDetailsMap(sizeHint int) structFieldNameStructRepresentation_Map_FieldDetailsMapBuilder {
	return structFieldNameStructRepresentation_Map_FieldDetailsMapBuilder{make(map[StructFieldName]StructRepresentation_Map_FieldDetails, sizeHint)}
}
func (b *structFieldNameStructRepresentation_Map_FieldDetailsMapBuilder) Append(k StructFieldName, v StructRepresentation_Map_FieldDetails) {
	b.x[k] = v
}
func (b *structFieldNameStructRepresentation_Map_FieldDetailsMapBuilder) Finish() structFieldNameStructRepresentation_Map_FieldDetailsMap {
	v := *b
	b.x = nil
	return structFieldNameStructRepresentation_Map_FieldDetailsMap(v)
}

type typeNameList struct {
	x []TypeName
}
type typeNameListBuilder typeNameList

func (Compiler) MakeTypeNameList(ents ...TypeName) typeNameList {
	x := make([]TypeName, len(ents))
	copy(x, ents)
	return typeNameList{x}
}
func (Compiler) StartTypeNameList(sizeHint int) typeNameListBuilder {
	return typeNameListBuilder{make([]TypeName, 0, sizeHint)}
}
func (b *typeNameListBuilder) Append(v TypeName) {
	b.x = append(b.x, v)
}
func (b *typeNameListBuilder) Finish() typeNameList {
	v := *b
	b.x = nil
	return typeNameList(v)
}

type stringTypeNameMap struct {
	x map[string]TypeName
}
type stringTypeNameEntry struct {
	k string
	v TypeName
}
type stringTypeNameMapBuilder stringTypeNameMap

func (Compiler) MakeStringTypeNameMap(ents ...stringTypeNameEntry) stringTypeNameMap {
	x := make(map[string]TypeName, len(ents))
	for _, y := range ents {
		x[y.k] = y.v
	}
	return stringTypeNameMap{x}
}
func (Compiler) MakeStringTypeNameMapEntry(k string, v TypeName) stringTypeNameEntry {
	return stringTypeNameEntry{k, v}
}
func (Compiler) StartStringTypeNameMap(sizeHint int) stringTypeNameMapBuilder {
	return stringTypeNameMapBuilder{make(map[string]TypeName, sizeHint)}
}
func (b *stringTypeNameMapBuilder) Append(k string, v TypeName) {
	b.x[k] = v
}
func (b *stringTypeNameMapBuilder) Finish() stringTypeNameMap {
	v := *b
	b.x = nil
	return stringTypeNameMap(v)
}
